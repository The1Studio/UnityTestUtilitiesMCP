using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using UnityEditor;
using UnityEngine;

namespace TheOneStudio.UnityTestUtilitiesMCP.Editor.Services
{
    /// <summary>
    /// Implementation of <see cref="ITestResultsService"/> for analyzing Unity test results.
    /// Parses NUnit-formatted XML test results generated by Unity Test Runner.
    /// </summary>
    public class TestResultsService : ITestResultsService
    {
        private const string TEST_RESULTS_FILENAME = "TestResults.xml";

        /// <summary>
        /// Locates the most recent Unity test results file.
        /// Searches standard Unity configuration directories based on the platform.
        /// </summary>
        /// <returns>The absolute path to the test results file, or null if not found.</returns>
        public string LocateTestResultsFile()
        {
            try
            {
                // Get Unity company and product names from project settings
                string companyName = PlayerSettings.companyName;
                string productName = PlayerSettings.productName;

                if (string.IsNullOrEmpty(companyName) || string.IsNullOrEmpty(productName))
                {
                    Debug.LogWarning("[TestResultsService] Company or product name not set in Player Settings");
                    return SearchForTestResultsFile();
                }

                string testResultsPath = GetPlatformSpecificPath(companyName, productName);

                if (File.Exists(testResultsPath))
                {
                    Debug.Log($"[TestResultsService] Found test results at: {testResultsPath}");
                    return testResultsPath;
                }

                // Fallback: search for any recent test results
                Debug.LogWarning($"[TestResultsService] Test results not found at expected location: {testResultsPath}");
                return SearchForTestResultsFile();
            }
            catch (Exception ex)
            {
                Debug.LogError($"[TestResultsService] Error locating test results file: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Reads the contents of the Unity test results file.
        /// </summary>
        /// <returns>The raw XML content of the test results file.</returns>
        /// <exception cref="FileNotFoundException">Thrown if the test results file cannot be found.</exception>
        /// <exception cref="IOException">Thrown if there is an error reading the file.</exception>
        public string ReadTestResultsFile()
        {
            string filePath = LocateTestResultsFile();

            if (string.IsNullOrEmpty(filePath))
            {
                throw new FileNotFoundException(
                    "Unity test results file not found. Run tests via Test Runner (Window → General → Test Runner) first.");
            }

            try
            {
                string content = File.ReadAllText(filePath);
                Debug.Log($"[TestResultsService] Successfully read test results from: {filePath}");
                return content;
            }
            catch (Exception ex)
            {
                Debug.LogError($"[TestResultsService] Failed to read test results file: {ex.Message}");
                throw new IOException($"Failed to read test results file at {filePath}: {ex.Message}", ex);
            }
        }

        /// <summary>
        /// Parses Unity test results XML content into a structured summary.
        /// </summary>
        /// <param name="xmlContent">The raw XML content from Unity's NUnit test results file.</param>
        /// <returns>A structured summary containing test statistics and failure details.</returns>
        /// <exception cref="XmlException">Thrown if the XML content is malformed.</exception>
        /// <exception cref="ArgumentException">Thrown if the XML content is null or empty.</exception>
        public TestResultsSummary ParseTestResults(string xmlContent)
        {
            if (string.IsNullOrEmpty(xmlContent))
            {
                throw new ArgumentException("XML content cannot be null or empty", nameof(xmlContent));
            }

            try
            {
                var summary = new TestResultsSummary();
                var xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(xmlContent);

                // Parse root test-run element for overall statistics
                XmlNode testRunNode = xmlDoc.SelectSingleNode("//test-run");
                if (testRunNode != null)
                {
                    summary.TotalTests = ParseIntAttribute(testRunNode, "total");
                    summary.PassedTests = ParseIntAttribute(testRunNode, "passed");
                    summary.FailedTests = ParseIntAttribute(testRunNode, "failed");
                    summary.SkippedTests = ParseIntAttribute(testRunNode, "skipped") +
                                          ParseIntAttribute(testRunNode, "inconclusive");
                    summary.DurationSeconds = ParseDoubleAttribute(testRunNode, "duration");
                    summary.StartTime = ParseStringAttribute(testRunNode, "start-time");
                    summary.EndTime = ParseStringAttribute(testRunNode, "end-time");
                }

                // Parse failed test cases
                XmlNodeList failedTests = xmlDoc.SelectNodes("//test-case[@result='Failed']");
                if (failedTests != null)
                {
                    foreach (XmlNode testCase in failedTests)
                    {
                        var failedTest = new FailedTestDetail
                        {
                            TestName = ParseStringAttribute(testCase, "fullname"),
                            TestSuite = ParseStringAttribute(testCase, "classname"),
                            Duration = ParseDoubleAttribute(testCase, "duration"),
                            Result = ParseStringAttribute(testCase, "result")
                        };

                        // Parse failure message and stack trace
                        XmlNode failureNode = testCase.SelectSingleNode("failure");
                        if (failureNode != null)
                        {
                            XmlNode messageNode = failureNode.SelectSingleNode("message");
                            if (messageNode != null)
                            {
                                failedTest.FailureMessage = messageNode.InnerText?.Trim();
                            }

                            XmlNode stackTraceNode = failureNode.SelectSingleNode("stack-trace");
                            if (stackTraceNode != null)
                            {
                                failedTest.StackTrace = stackTraceNode.InnerText?.Trim();
                            }
                        }

                        summary.FailedTestDetails.Add(failedTest);
                    }
                }

                Debug.Log($"[TestResultsService] Parsed test results: {summary.TotalTests} total, " +
                         $"{summary.PassedTests} passed, {summary.FailedTests} failed");

                return summary;
            }
            catch (XmlException ex)
            {
                Debug.LogError($"[TestResultsService] Failed to parse XML: {ex.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Debug.LogError($"[TestResultsService] Unexpected error parsing test results: {ex.Message}");
                throw new XmlException($"Failed to parse test results: {ex.Message}", ex);
            }
        }

        /// <summary>
        /// Gets the platform-specific path to the Unity test results file.
        /// </summary>
        private string GetPlatformSpecificPath(string companyName, string productName)
        {
            string baseConfigPath;

#if UNITY_EDITOR_WIN
            // Windows: %USERPROFILE%\AppData\LocalLow\[CompanyName]\[ProductName]\TestResults.xml
            string userProfile = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
            baseConfigPath = Path.Combine(userProfile, "AppData", "LocalLow");
#elif UNITY_EDITOR_OSX || UNITY_EDITOR_LINUX
            // Mac/Linux: ~/.config/unity3d/[CompanyName]/[ProductName]/TestResults.xml
            string homeDirectory = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
            baseConfigPath = Path.Combine(homeDirectory, ".config", "unity3d");
#else
            // Fallback
            baseConfigPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "unity3d");
#endif

            return Path.Combine(baseConfigPath, companyName, productName, TEST_RESULTS_FILENAME);
        }

        /// <summary>
        /// Searches for test results files in common Unity directories.
        /// Returns the most recently modified file.
        /// </summary>
        private string SearchForTestResultsFile()
        {
            try
            {
                string homeDirectory = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
                string configPath;

#if UNITY_EDITOR_WIN
                string userProfile = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
                configPath = Path.Combine(userProfile, "AppData", "LocalLow");
#else
                configPath = Path.Combine(homeDirectory, ".config", "unity3d");
#endif

                if (!Directory.Exists(configPath))
                {
                    Debug.LogWarning($"[TestResultsService] Config path does not exist: {configPath}");
                    return null;
                }

                // Recursively search for TestResults.xml files
                var testResultFiles = Directory.GetFiles(configPath, TEST_RESULTS_FILENAME, SearchOption.AllDirectories)
                    .Select(f => new FileInfo(f))
                    .OrderByDescending(f => f.LastWriteTime)
                    .ToList();

                if (testResultFiles.Any())
                {
                    string mostRecentFile = testResultFiles.First().FullName;
                    Debug.Log($"[TestResultsService] Found most recent test results at: {mostRecentFile}");
                    return mostRecentFile;
                }

                Debug.LogWarning("[TestResultsService] No test results files found in Unity config directories");
                return null;
            }
            catch (Exception ex)
            {
                Debug.LogError($"[TestResultsService] Error searching for test results: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Safely parses an integer attribute from an XML node.
        /// </summary>
        private int ParseIntAttribute(XmlNode node, string attributeName)
        {
            string value = ParseStringAttribute(node, attributeName);
            return int.TryParse(value, out int result) ? result : 0;
        }

        /// <summary>
        /// Safely parses a double attribute from an XML node.
        /// </summary>
        private double ParseDoubleAttribute(XmlNode node, string attributeName)
        {
            string value = ParseStringAttribute(node, attributeName);
            return double.TryParse(value, System.Globalization.NumberStyles.Any,
                System.Globalization.CultureInfo.InvariantCulture, out double result) ? result : 0.0;
        }

        /// <summary>
        /// Safely parses a string attribute from an XML node.
        /// </summary>
        private string ParseStringAttribute(XmlNode node, string attributeName)
        {
            return node?.Attributes?[attributeName]?.Value ?? string.Empty;
        }
    }
}
